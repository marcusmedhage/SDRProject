options:
  parameters:
    author: Stream
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Eigenvalue_detector_USRP
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Number_of_channels
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '1'
    step: '1'
    stop: '20'
    value: '4'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 4.0]
    rotation: 0
    state: true
- name: Threshold
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.5'
    step: '0.1'
    stop: '4'
    value: '0.5'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 20.0]
    rotation: 0
    state: true
- name: Threshold_range
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '10'
    stop: '50'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 68.0]
    rotation: 0
    state: true
- name: amplitude_noise
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.001'
    stop: '0.1'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 644.0]
    rotation: 0
    state: true
- name: center_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 80e6
    step: 1e6
    stop: 100e6
    value: 90e6
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 4.0]
    rotation: 0
    state: enabled
- name: center_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 2.4e9
    step: 10e5
    stop: 2.5e9
    value: 2.45e9
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 4.0]
    rotation: 0
    state: disabled
- name: channel_selector
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: Number_of_channels-1
    value: '1'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 5e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 24.0]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: amplitude_noise
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 156.0]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 340.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: 2**14
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 500.0]
    rotation: 0
    state: true
- name: blocks_message_debug_0_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
    log_level: info
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 324.0]
    rotation: 0
    state: enabled
- name: blocks_nlog10_ff_0
  id: blocks_nlog10_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '10'
    vlen: 2**14
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 616.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '16384'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 156.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_decimator_0
  id: blocks_stream_to_vector_decimator
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: samp_rate
    type: complex
    vec_rate: '10'
    vlen: 2**14
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 220.0]
    rotation: 0
    state: true
- name: epy_block_1_0
  id: epy_block
  parameters:
    Pfa: '0.05'
    Threshold: Threshold
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nimport time\nimport matplotlib.pyplot as\
      \ plt\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, vectorSize=2**14, Pfa=0.05,\
      \ Threshold=100,sampling_rate=30e3,num_channels=4,channel=0):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='Energy_detector_channels',\n            in_sig=[(np.complex64,vectorSize)],\n\
      \            out_sig=[(np.complex64,vectorSize), (np.float32,vectorSize)],\n\
      \        )\n        self.portName = 'messageOutput'\n        self.message_port_register_out(pmt.intern(self.portName))\n\
      \        self.vectorSize = vectorSize\n        self.Pfa = Pfa\n        self.Threshold\
      \ = Threshold\n        self.sampling_rate=sampling_rate\n        self.num_channels=num_channels\n\
      \        self.channel=channel\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        #Hard-coding vaibles\
      \ as program is buggy\n        #Size of the FFT\n        #vectorSize = 2**11\n\
      \        Ns= self.vectorSize       \n        signal=input_items[0][0]\n    \
      \    channel_outputs_size=int(self.vectorSize/self.num_channels)\n        \n\
      \        # Perform FFT of the combined signal\n        fft_result = np.fft.fft(signal)\n\
      \        freq = np.fft.fftfreq(len(fft_result), 1.0 / self.sampling_rate)\n\n\
      \        # Divide the spectrum into n equal channels\n        n = int(self.num_channels)\
      \ # Number of channels\n\n        total_frequency_range = max(freq) - min(freq)\n\
      \        channel_bandwidth = total_frequency_range / n\n\n        # Define the\
      \ center frequencies of the n channels\n        center_frequencies = [min(freq)\
      \ + (i + 0.5) * channel_bandwidth for i in range(n)]\n\n        # Create channels\
      \ for each frequency range\n        channels = []\n        for center_frequency\
      \ in center_frequencies:\n            channel = np.logical_and(freq >= center_frequency\
      \ - channel_bandwidth / 2, freq < center_frequency + channel_bandwidth / 2)\n\
      \            channels.append(channel)\n\n        # Apply FFT results to each\
      \ channel\n        fft_channels = []\n        for i in range(n):\n         \
      \   fft_channel = np.copy(fft_result)\n            #white_noise = np.mean(np.abs(fft_result))\
      \ * np.random.randn(len(signal))\n            fft_channel[~channels[i]] = 0\
      \  # Add white noise to frequencies outside of the channel\n            #fft_channel=fft_channel+white_noise\n\
      \            fft_channels.append(fft_channel)\n\n        # Perform Inverse FFT\
      \ on each channel\n        reconstructed_signals = [np.fft.ifft(fft_channels[i])\
      \ for i in range(n)]\n        noise_reconstructed=np.random.randn(len(reconstructed_signals[0]))*0.01\n\
      \        reconstructed_signals=reconstructed_signals[:]+noise_reconstructed\n\
      \        #signal=reconstructed_signals[int(self.channel)] \n        active_channel_list=[]\n\
      \        for ii in range(n):\n            signal=reconstructed_signals[ii]\n\
      \            signal_power=np.sum(np.abs(signal)**2)\n            if self.Threshold\
      \ <=signal_power:\n                detected_signal=\"Detected signal\"\n   \
      \             active_channel_list.append(\"1\")\n                for vectorIndex\
      \ in range(len(output_items[1])):\n                    for sampleIndex in list(range(channel_outputs_size*ii,\
      \ channel_outputs_size*(ii+1))):\n                        output_items[1][vectorIndex][sampleIndex]\
      \ = 20.0\n            else:\n                detected_signal=\"No signal\"\n\
      \                active_channel_list.append(\"0\")\n                for vectorIndex\
      \ in range(len(output_items[1])):\n                    for sampleIndex in list(range(channel_outputs_size*ii,\
      \ channel_outputs_size*(ii+1))):\n                        output_items[1][vectorIndex][sampleIndex]\
      \ = 0.01\n                \n            if int(self.channel)==ii:\n        \
      \        print(\"The energy for selected channel is: \",signal_power)\n    \
      \        \n                             \n                \n\n\n    #      \
      \   # Convert the signal array to a string\n    #         signal_str = ' '.join(map(str,\
      \ signal))\n    #         \n    #         # Create a dictionary to hold both\
      \ pieces of information\n    #         message_data = {'signal': signal_str,\
      \ 'detected_signal': detected_signal}\n    #         print(\"Lambda_min:\",\
      \ Lambda_min)\n    #         print(\"Ratio1:\", Ratio1)\n            #Printing:\n\
      #                print(\"Ratio: \", Ratio1)\n#                print(\"Gamma:\
      \ \",gamma)\n#                print(detected_signal)\n        # Convert the\
      \ dictionary to a PMT message\n        compound_message = pmt.to_pmt(active_channel_list)\n\
      \        #output_items[0][0]=reconstructed_signals[int(self.channel)]\n    \
      \    # Publish the compound message\n        self.message_port_pub(pmt.intern(self.portName),\
      \ compound_message)\n        return len(output_items[0])\n\n\n\n\n"
    affinity: ''
    alias: ''
    channel: channel_selector
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_channels: Number_of_channels
    sampling_rate: samp_rate
    vectorSize: '16384'
  states:
    _io_cache: ('Energy_detector_channels', 'blk', [('vectorSize', '16384'), ('Pfa',
      '0.05'), ('Threshold', '100'), ('sampling_rate', '30000.0'), ('num_channels',
      '4'), ('channel', '0')], [('0', 'complex', 16384)], [('0', 'complex', 16384),
      ('1', 'float', 16384), ('messageOutput', 'message', 1)], 'Embedded Python Block
      example - a simple multiply const', ['Pfa', 'Threshold', 'channel', 'num_channels',
      'sampling_rate', 'vectorSize'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 156.0]
    rotation: 0
    state: true
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: 2**14
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(2**14)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 812.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: center_freq
    fftsize: '8192'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '20'
    showports: 'True'
    showrf: 'True'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 508.0]
    rotation: 0
    state: true
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"red"'
    color10: '"dark blue"'
    color2: '"blue"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'True'
    gui_hint: ''
    label1: Channel acitivation
    label10: ''
    label2: FFT
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '2'
    ref_level: '0'
    showports: 'False'
    update_time: '0.05'
    vlen: '16384'
    width1: '4'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"Frequency (MHz)"'
    x_start: (center_freq-samp_rate/2)/(1e6)
    x_step: (samp_rate/(1e6))/16384
    x_units: '"MHz"'
    y_axis_label: '""'
    y_units: '""'
    ymax: '2'
    ymin: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1216, 384.0]
    rotation: 0
    state: true
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: samp_rate
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: '50'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Disabled
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [120, 312.0]
    rotation: 0
    state: true

connections:
- [analog_noise_source_x_0, '0', blocks_add_xx_0, '0']
- [blocks_add_xx_0, '0', blocks_stream_to_vector_decimator_0, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_nlog10_ff_0, '0']
- [blocks_nlog10_ff_0, '0', qtgui_vector_sink_f_0, '1']
- [blocks_stream_to_vector_decimator_0, '0', epy_block_1_0, '0']
- [blocks_stream_to_vector_decimator_0, '0', fft_vxx_0, '0']
- [epy_block_1_0, '0', blocks_null_sink_0, '0']
- [epy_block_1_0, '1', qtgui_vector_sink_f_0, '0']
- [epy_block_1_0, messageOutput, blocks_message_debug_0_0, log]
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [qtgui_sink_x_0, freq, uhd_usrp_source_0, command]
- [uhd_usrp_source_0, '0', blocks_add_xx_0, '1']
- [uhd_usrp_source_0, '0', qtgui_sink_x_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
